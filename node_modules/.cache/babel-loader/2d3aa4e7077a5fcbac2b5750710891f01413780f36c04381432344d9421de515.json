{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { assertCurrentChain } from '../../utils/chain.js';\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { prepareRequest } from '../../utils/transaction/prepareRequest.js';\nimport { getChainId } from '../public/getChainId.js';\n/**\n * Creates, signs, and sends a new transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/transactions/sending-transactions\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await sendTransaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransaction(client, args) {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    accessList,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/sendTransaction'\n  });\n  const account = parseAccount(account_);\n  try {\n    assertRequest(args);\n    let chainId;\n    if (chain !== null) {\n      chainId = await getChainId(client);\n      assertCurrentChain({\n        currentChainId: chainId,\n        chain\n      });\n    }\n    if (account.type === 'local') {\n      // Prepare the request for signing (assign appropriate fees, etc.)\n      const request = await prepareRequest(client, {\n        account,\n        accessList,\n        chain,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value,\n        ...rest\n      });\n      if (!chainId) chainId = await getChainId(client);\n      const serializer = chain?.serializers?.transaction;\n      const signedRequest = await account.signTransaction({\n        ...request,\n        chainId\n      }, {\n        serializer\n      });\n      return await client.request({\n        method: 'eth_sendRawTransaction',\n        params: [signedRequest]\n      });\n    }\n    const format = chain?.formatters?.transactionRequest?.format || formatTransactionRequest;\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, {\n        format\n      }),\n      accessList,\n      data,\n      from: account.address,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value\n    });\n    return await client.request({\n      method: 'eth_sendTransaction',\n      params: [request]\n    });\n  } catch (err) {\n    throw getTransactionError(err, {\n      ...args,\n      account,\n      chain: args.chain || undefined\n    });\n  }\n}","map":{"version":3,"names":["parseAccount","AccountNotFoundError","assertCurrentChain","getTransactionError","extract","formatTransactionRequest","assertRequest","prepareRequest","getChainId","sendTransaction","client","args","account","account_","chain","accessList","data","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","value","rest","docsPath","chainId","currentChainId","type","request","serializer","serializers","transaction","signedRequest","signTransaction","method","params","format","formatters","transactionRequest","from","address","err","undefined"],"sources":["C:\\Users\\irakl\\OneDrive\\Desktop\\wallet-connect\\node_modules\\viem\\src\\actions\\wallet\\sendTransaction.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain, GetChain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type {\n  TransactionRequest,\n  TransactionSerializable,\n} from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport { assertCurrentChain } from '../../utils/chain.js'\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport {\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport { prepareRequest } from '../../utils/transaction/prepareRequest.js'\nimport { getChainId } from '../public/getChainId.js'\n\nexport type SendTransactionParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<\n    TChainOverride extends Chain ? TChainOverride : TChain\n  >,\n  'from'\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type SendTransactionReturnType = Hash\n\n/**\n * Creates, signs, and sends a new transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/transactions/sending-transactions\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await sendTransaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransaction<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TChainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: SendTransactionParameters<TChain, TAccount, TChainOverride>,\n): Promise<SendTransactionReturnType> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    accessList,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/sendTransaction',\n    })\n  const account = parseAccount(account_)\n\n  try {\n    assertRequest(args as AssertRequestParameters)\n\n    let chainId\n    if (chain !== null) {\n      chainId = await getChainId(client)\n      assertCurrentChain({\n        currentChainId: chainId,\n        chain,\n      })\n    }\n\n    if (account.type === 'local') {\n      // Prepare the request for signing (assign appropriate fees, etc.)\n      const request = await prepareRequest(client, {\n        account,\n        accessList,\n        chain,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value,\n        ...rest,\n      } as any)\n\n      if (!chainId) chainId = await getChainId(client)\n\n      const serializer = chain?.serializers?.transaction\n      const signedRequest = (await account.signTransaction(\n        {\n          ...request,\n          chainId,\n        } as TransactionSerializable,\n        { serializer },\n      )) as Hash\n      return await client.request({\n        method: 'eth_sendRawTransaction',\n        params: [signedRequest],\n      })\n    }\n\n    const format =\n      chain?.formatters?.transactionRequest?.format || formatTransactionRequest\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format }),\n      accessList,\n      data,\n      from: account.address,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n    return await client.request({\n      method: 'eth_sendTransaction',\n      params: [request],\n    })\n  } catch (err) {\n    throw getTransactionError(err as BaseError, {\n      ...args,\n      account,\n      chain: args.chain || undefined,\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}