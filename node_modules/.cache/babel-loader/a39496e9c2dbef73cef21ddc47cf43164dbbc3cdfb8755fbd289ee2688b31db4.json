{"ast":null,"code":"import { disconnect as h, getAccount as l, watchAccount as d, fetchBalance as u, getNetwork as w, watchNetwork as p, switchNetwork as m, fetchEnsName as C, fetchEnsAvatar as f, connect as a, InjectedConnector as g } from \"@wagmi/core\";\nimport { WalletConnectConnector as v } from \"@wagmi/core/connectors/walletConnect\";\nimport { jsonRpcProvider as I } from \"@wagmi/core/providers/jsonRpc\";\nconst A = \"wallet_addEthereumChain\";\nclass j {\n  constructor(t, e) {\n    this.wagmi = {}, this.chains = [], this.namespace = \"eip155\", this.disconnect = h, this.getAccount = l, this.watchAccount = d, this.fetchBalance = u, this.getNetwork = w, this.watchNetwork = p, this.switchNetwork = m, this.fetchEnsName = C, this.fetchEnsAvatar = f, this.wagmi = t, this.chains = e;\n  }\n  getWalletConnectConnector() {\n    const t = this.wagmi.connectors.find(e => e.id === \"walletConnect\");\n    if (!t) throw new Error(\"WalletConnectConnector is required\");\n    return t;\n  }\n  async connectWalletConnectProvider(t, e) {\n    return await t.getProvider(), new Promise(n => {\n      t.once(\"message\", o => {\n        o.type === \"display_uri\" && (e(o.data), n());\n      });\n    });\n  }\n  getConnectorById(t) {\n    const e = this.wagmi.connectors.find(n => n.id === t);\n    if (!e) throw new Error(`Connector for id ${t} was not found`);\n    return e;\n  }\n  getConnectors() {\n    return this.wagmi.connectors.filter(t => !t.id.includes(\"walletConnect\"));\n  }\n  async connectWalletConnect(t, e) {\n    const n = this.getWalletConnectConnector(),\n      o = {\n        connector: n\n      };\n    return e && (o.chainId = e), Promise.all([a(o), this.connectWalletConnectProvider(n, t)]);\n  }\n  async connectConnector(t, e) {\n    const n = {\n      connector: this.getConnectorById(t)\n    };\n    return e && (n.chainId = e), await a(n);\n  }\n  isInjectedProviderInstalled() {\n    return typeof window.ethereum < \"u\";\n  }\n  safeCheckInjectedProvider(t) {\n    var e;\n    try {\n      const n = String(t);\n      return Boolean((e = window.ethereum) == null ? void 0 : e[n]);\n    } catch (n) {\n      return console.error(n), !1;\n    }\n  }\n  async getConnectedChainIds() {\n    var t, e, n;\n    const o = (e = (t = (await this.getWalletConnectConnector().getProvider()).signer) == null ? void 0 : t.session) == null ? void 0 : e.namespaces,\n      s = (n = o?.[this.namespace]) == null ? void 0 : n.methods;\n    if (s != null && s.includes(A)) return \"ALL\";\n    if (o) {\n      const i = [];\n      return Object.keys(o).forEach(r => {\n        r.includes(this.namespace) && i.push(...o[r].accounts);\n      }), i?.map(r => r.split(\":\")[1]);\n    }\n    return \"ALL\";\n  }\n}\nconst P = \"eip155\",\n  y = \"https://rpc.walletconnect.com\";\nfunction W({\n  projectId: c\n}) {\n  return I({\n    rpc: t => {\n      var e;\n      return [1, 3, 4, 5, 10, 42, 56, 69, 97, 100, 137, 280, 324, 420, 42161, 42220, 43114, 80001, 421611, 421613, 1313161554, 1313161555].includes(t.id) ? {\n        http: `${y}/v1/?chainId=${P}:${t.id}&projectId=${c}`\n      } : {\n        http: t.rpcUrls.default.http[0],\n        webSocket: (e = t.rpcUrls.default.webSocket) == null ? void 0 : e[0]\n      };\n    }\n  });\n}\nfunction B({\n  chains: c,\n  projectId: t\n}) {\n  return [new v({\n    chains: c,\n    options: {\n      projectId: t,\n      showQrModal: !1\n    }\n  }), new g({\n    chains: c,\n    options: {\n      shimDisconnect: !0\n    }\n  })];\n}\nexport { j as EthereumClient, B as w3mConnectors, W as w3mProvider };","map":{"version":3,"names":["A","j","constructor","t","e","wagmi","chains","namespace","disconnect","h","getAccount","l","watchAccount","d","fetchBalance","u","getNetwork","w","watchNetwork","p","switchNetwork","m","fetchEnsName","C","fetchEnsAvatar","f","getWalletConnectConnector","connectors","find","id","Error","connectWalletConnectProvider","getProvider","Promise","n","once","o","type","data","getConnectorById","getConnectors","filter","includes","connectWalletConnect","connector","chainId","all","a","connectConnector","isInjectedProviderInstalled","window","ethereum","safeCheckInjectedProvider","String","Boolean","console","error","getConnectedChainIds","signer","session","namespaces","s","methods","i","Object","keys","forEach","r","push","accounts","map","split","P","y","W","projectId","c","I","rpc","http","rpcUrls","default","webSocket","B","v","options","showQrModal","g","shimDisconnect","EthereumClient","w3mConnectors","w3mProvider"],"sources":["C:\\Users\\irakl\\OneDrive\\Desktop\\wallet-connect\\node_modules\\@web3modal\\ethereum\\src\\client.ts","C:\\Users\\irakl\\OneDrive\\Desktop\\wallet-connect\\node_modules\\@web3modal\\ethereum\\src\\utils.ts"],"sourcesContent":["import type { Chain, Config, ConnectArgs, Connector } from '@wagmi/core'\nimport {\n  connect,\n  disconnect,\n  fetchBalance,\n  fetchEnsAvatar,\n  fetchEnsName,\n  getAccount,\n  getNetwork,\n  switchNetwork,\n  watchAccount,\n  watchNetwork\n} from '@wagmi/core'\nimport type { ConnectorId } from './types'\n\n// -- helpers ------------------------------------------- //\nconst ADD_ETH_CHAIN_METHOD = 'wallet_addEthereumChain'\n\nexport class EthereumClient {\n  private readonly wagmi = {} as Config\n\n  public readonly chains = [] as Chain[]\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(wagmi: any, chains: Chain[]) {\n    this.wagmi = wagmi\n    this.chains = chains\n  }\n\n  // -- private ------------------------------------------- //\n  private getWalletConnectConnector() {\n    const connector = this.wagmi.connectors.find((c: Connector) => c.id === 'walletConnect')\n\n    if (!connector) {\n      throw new Error('WalletConnectConnector is required')\n    }\n\n    return connector\n  }\n\n  private async connectWalletConnectProvider(connector: Connector, onUri: (uri: string) => void) {\n    await connector.getProvider()\n\n    return new Promise<void>(resolve => {\n      connector.once('message', event => {\n        if (event.type === 'display_uri') {\n          onUri(event.data as string)\n          resolve()\n        }\n      })\n    })\n  }\n\n  // -- public web3modal ---------------------------------- //\n  public namespace = 'eip155'\n\n  public getConnectorById(id: ConnectorId | string) {\n    const connector = this.wagmi.connectors.find(item => item.id === id)\n    if (!connector) {\n      throw new Error(`Connector for id ${id} was not found`)\n    }\n\n    return connector\n  }\n\n  public getConnectors() {\n    const connectors = this.wagmi.connectors.filter(\n      connector => !connector.id.includes('walletConnect')\n    )\n\n    return connectors\n  }\n\n  public async connectWalletConnect(onUri: (uri: string) => void, chainId?: number) {\n    const connector = this.getWalletConnectConnector()\n    const options: ConnectArgs = { connector }\n    if (chainId) {\n      options.chainId = chainId\n    }\n\n    return Promise.all([connect(options), this.connectWalletConnectProvider(connector, onUri)])\n  }\n\n  public async connectConnector(connectorId: ConnectorId | string, chainId?: number) {\n    const connector = this.getConnectorById(connectorId)\n    const options: ConnectArgs = { connector }\n    if (chainId) {\n      options.chainId = chainId\n    }\n    const data = await connect(options)\n\n    return data\n  }\n\n  public isInjectedProviderInstalled() {\n    // @ts-expect-error - ethereum can exist\n    return typeof window.ethereum !== 'undefined'\n  }\n\n  public safeCheckInjectedProvider(providerId: string) {\n    try {\n      const stringId = String(providerId)\n\n      // @ts-expect-error - Structure is correct\n      return Boolean(window.ethereum?.[stringId])\n    } catch (err) {\n      console.error(err)\n\n      return false\n    }\n  }\n\n  public async getConnectedChainIds() {\n    const connector = this.getWalletConnectConnector()\n    const provider = await connector.getProvider()\n    const sessionNamespaces = provider.signer?.session?.namespaces\n    const sessionMethods = sessionNamespaces?.[this.namespace]?.methods\n\n    if (sessionMethods?.includes(ADD_ETH_CHAIN_METHOD)) {\n      return 'ALL'\n    }\n\n    if (sessionNamespaces) {\n      const sessionAccounts: string[] = []\n      Object.keys(sessionNamespaces).forEach(namespaceKey => {\n        if (namespaceKey.includes(this.namespace)) {\n          sessionAccounts.push(...sessionNamespaces[namespaceKey].accounts)\n        }\n      })\n      const sessionChains = sessionAccounts?.map((a: string) => a.split(':')[1])\n\n      return sessionChains\n    }\n\n    return 'ALL'\n  }\n\n  public disconnect = disconnect\n\n  public getAccount = getAccount\n\n  public watchAccount = watchAccount\n\n  public fetchBalance = fetchBalance\n\n  public getNetwork = getNetwork\n\n  public watchNetwork = watchNetwork\n\n  public switchNetwork = switchNetwork\n\n  // -- public web3modal (optional) ----------------------- //\n  public fetchEnsName = fetchEnsName\n\n  public fetchEnsAvatar = fetchEnsAvatar\n}\n","import { WalletConnectConnector } from '@wagmi/core/connectors/walletConnect'\nimport type { Chain } from '@wagmi/core'\nimport { InjectedConnector } from '@wagmi/core'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport type { ModalConnectorsOpts, WalletConnectProviderOpts } from './types'\n\n// -- constants ------------------------------------------------------- //\nexport const NAMESPACE = 'eip155'\nexport const BLOCKCHAIN_API = 'https://rpc.walletconnect.com'\n\n// -- providers ------------------------------------------------------- //\nexport function w3mProvider<C extends Chain>({ projectId }: WalletConnectProviderOpts) {\n  return jsonRpcProvider<C>({\n    rpc: chain => {\n      const supportedChains = [\n        1, 3, 4, 5, 10, 42, 56, 69, 97, 100, 137, 280, 324, 420, 42161, 42220, 43114, 80001, 421611,\n        421613, 1313161554, 1313161555\n      ]\n\n      if (supportedChains.includes(chain.id)) {\n        return {\n          http: `${BLOCKCHAIN_API}/v1/?chainId=${NAMESPACE}:${chain.id}&projectId=${projectId}`\n        }\n      }\n\n      return {\n        http: chain.rpcUrls.default.http[0],\n        webSocket: chain.rpcUrls.default.webSocket?.[0]\n      }\n    }\n  })\n}\n\n// -- connectors ------------------------------------------------------ //\nexport function w3mConnectors({ chains, projectId }: ModalConnectorsOpts) {\n  return [\n    new WalletConnectConnector({\n      chains,\n      options: { projectId, showQrModal: false }\n    }),\n    new InjectedConnector({ chains, options: { shimDisconnect: true } })\n  ]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}