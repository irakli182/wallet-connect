{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { estimateGas } from '../../actions/public/estimateGas.js';\nimport { getBlock } from '../../actions/public/getBlock.js';\nimport { getGasPrice } from '../../actions/public/getGasPrice.js';\nimport { getTransactionCount } from '../../actions/public/getTransactionCount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { BaseError } from '../../errors/base.js';\nimport { assertRequest } from './assertRequest.js';\nexport async function prepareRequest(client, args) {\n  const {\n    account: account_,\n    chain = client.chain,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce\n  } = args;\n  if (!account_) throw new AccountNotFoundError();\n  const account = parseAccount(account_);\n  const block = await getBlock(client, {\n    blockTag: 'latest'\n  });\n  const request = {\n    ...args,\n    from: account.address\n  };\n  if (typeof nonce === 'undefined') request.nonce = await getTransactionCount(client, {\n    address: account.address,\n    blockTag: 'pending'\n  });\n  if (typeof block.baseFeePerGas === 'bigint' && typeof gasPrice === 'undefined') {\n    let defaultPriorityFee = 1500000000n; // 1.5 gwei\n    if (typeof chain?.fees?.defaultPriorityFee !== 'undefined') {\n      defaultPriorityFee = typeof chain.fees.defaultPriorityFee === 'bigint' ? chain.fees.defaultPriorityFee : await chain.fees.defaultPriorityFee({\n        block,\n        request: request\n      });\n    }\n    // EIP-1559 fees\n    if (typeof maxFeePerGas === 'undefined') {\n      // Set a buffer of 1.2x on top of the base fee to account for fluctuations.\n      request.maxPriorityFeePerGas = maxPriorityFeePerGas ?? defaultPriorityFee;\n      request.maxFeePerGas = block.baseFeePerGas * 120n / 100n + request.maxPriorityFeePerGas;\n    } else {\n      if (typeof maxPriorityFeePerGas === 'undefined' && maxFeePerGas < defaultPriorityFee) throw new BaseError('`maxFeePerGas` cannot be less than the default `maxPriorityFeePerGas` (1.5 gwei).');\n      request.maxFeePerGas = maxFeePerGas;\n      request.maxPriorityFeePerGas = maxPriorityFeePerGas ?? defaultPriorityFee;\n    }\n  } else if (typeof gasPrice === 'undefined') {\n    // Legacy fees\n    if (typeof maxFeePerGas !== 'undefined' || typeof maxPriorityFeePerGas !== 'undefined') throw new BaseError('Chain does not support EIP-1559 fees.');\n    // Set a buffer of 1.2x on top of the base fee to account for fluctuations.\n    request.gasPrice = (await getGasPrice(client)) * 120n / 100n;\n  }\n  if (typeof gas === 'undefined') request.gas = await estimateGas(client, {\n    ...request,\n    account: {\n      address: account.address,\n      type: 'json-rpc'\n    }\n  });\n  assertRequest(request);\n  return request;\n}","map":{"version":3,"names":["parseAccount","estimateGas","getBlock","getGasPrice","getTransactionCount","AccountNotFoundError","BaseError","assertRequest","prepareRequest","client","args","account","account_","chain","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","block","blockTag","request","from","address","baseFeePerGas","defaultPriorityFee","fees","type"],"sources":["C:\\Users\\irakl\\OneDrive\\Desktop\\wallet-connect\\node_modules\\viem\\src\\utils\\transaction\\prepareRequest.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport {\n  type EstimateGasParameters,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport { getBlock } from '../../actions/public/getBlock.js'\nimport { getGasPrice } from '../../actions/public/getGasPrice.js'\nimport { getTransactionCount } from '../../actions/public/getTransactionCount.js'\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport { BaseError } from '../../errors/base.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain, GetChain } from '../../types/chain.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { FormattedTransactionRequest } from '../index.js'\nimport { type AssertRequestParameters, assertRequest } from './assertRequest.js'\n\nexport type PrepareRequestParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<\n    TChainOverride extends Chain ? TChainOverride : TChain\n  >,\n  'from'\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type PrepareRequestReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n  TArgs extends PrepareRequestParameters<\n    TChain,\n    TAccount,\n    TChainOverride\n  > = PrepareRequestParameters<TChain, TAccount, TChainOverride>,\n> = TArgs & {\n  from: Address\n  gas: SendTransactionParameters['gas']\n  gasPrice?: SendTransactionParameters['gasPrice']\n  maxFeePerGas?: SendTransactionParameters['maxFeePerGas']\n  maxPriorityFeePerGas?: SendTransactionParameters['maxPriorityFeePerGas']\n  nonce: SendTransactionParameters['nonce']\n}\n\nexport async function prepareRequest<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TChainOverride extends Chain | undefined,\n  TArgs extends PrepareRequestParameters<TChain, TAccount, TChainOverride>,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: TArgs,\n): Promise<PrepareRequestReturnType<TChain, TAccount, TChainOverride, TArgs>> {\n  const {\n    account: account_,\n    chain = client.chain,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n  } = args\n  if (!account_) throw new AccountNotFoundError()\n  const account = parseAccount(account_)\n\n  const block = await getBlock(client, { blockTag: 'latest' })\n\n  const request = { ...args, from: account.address }\n\n  if (typeof nonce === 'undefined')\n    request.nonce = await getTransactionCount(client, {\n      address: account.address,\n      blockTag: 'pending',\n    })\n\n  if (\n    typeof block.baseFeePerGas === 'bigint' &&\n    typeof gasPrice === 'undefined'\n  ) {\n    let defaultPriorityFee = 1_500_000_000n // 1.5 gwei\n    if (typeof chain?.fees?.defaultPriorityFee !== 'undefined') {\n      defaultPriorityFee =\n        typeof chain.fees.defaultPriorityFee === 'bigint'\n          ? chain.fees.defaultPriorityFee\n          : await chain.fees.defaultPriorityFee({\n              block,\n              request: request as PrepareRequestParameters,\n            })\n    }\n\n    // EIP-1559 fees\n    if (typeof maxFeePerGas === 'undefined') {\n      // Set a buffer of 1.2x on top of the base fee to account for fluctuations.\n      request.maxPriorityFeePerGas = maxPriorityFeePerGas ?? defaultPriorityFee\n      request.maxFeePerGas =\n        (block.baseFeePerGas * 120n) / 100n + request.maxPriorityFeePerGas\n    } else {\n      if (\n        typeof maxPriorityFeePerGas === 'undefined' &&\n        maxFeePerGas < defaultPriorityFee\n      )\n        throw new BaseError(\n          '`maxFeePerGas` cannot be less than the default `maxPriorityFeePerGas` (1.5 gwei).',\n        )\n      request.maxFeePerGas = maxFeePerGas\n      request.maxPriorityFeePerGas = maxPriorityFeePerGas ?? defaultPriorityFee\n    }\n  } else if (typeof gasPrice === 'undefined') {\n    // Legacy fees\n    if (\n      typeof maxFeePerGas !== 'undefined' ||\n      typeof maxPriorityFeePerGas !== 'undefined'\n    )\n      throw new BaseError('Chain does not support EIP-1559 fees.')\n\n    // Set a buffer of 1.2x on top of the base fee to account for fluctuations.\n    request.gasPrice = ((await getGasPrice(client)) * 120n) / 100n\n  }\n\n  if (typeof gas === 'undefined')\n    request.gas = await estimateGas(client, {\n      ...request,\n      account: { address: account.address, type: 'json-rpc' },\n    } as EstimateGasParameters)\n\n  assertRequest(request as AssertRequestParameters)\n\n  return request as PrepareRequestReturnType<\n    TChain,\n    TAccount,\n    TChainOverride,\n    TArgs\n  >\n}\n"],"mappings":"AAGA,SAASA,YAAY,QAAQ,sCAAsC;AACnE,SAEEC,WAAW,QACN,qCAAqC;AAC5C,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,WAAW,QAAQ,qCAAqC;AACjE,SAASC,mBAAmB,QAAQ,6CAA6C;AAIjF,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,SAASC,SAAS,QAAQ,sBAAsB;AAKhD,SAAuCC,aAAa,QAAQ,oBAAoB;AAiChF,OAAO,eAAeC,cAAcA,CAMlCC,MAA2C,EAC3CC,IAAW;EAEX,MAAM;IACJC,OAAO,EAAEC,QAAQ;IACjBC,KAAK,GAAGJ,MAAM,CAACI,KAAK;IACpBC,GAAG;IACHC,QAAQ;IACRC,YAAY;IACZC,oBAAoB;IACpBC;EAAK,CACN,GAAGR,IAAI;EACR,IAAI,CAACE,QAAQ,EAAE,MAAM,IAAIP,oBAAoB,EAAE;EAC/C,MAAMM,OAAO,GAAGX,YAAY,CAACY,QAAQ,CAAC;EAEtC,MAAMO,KAAK,GAAG,MAAMjB,QAAQ,CAACO,MAAM,EAAE;IAAEW,QAAQ,EAAE;EAAQ,CAAE,CAAC;EAE5D,MAAMC,OAAO,GAAG;IAAE,GAAGX,IAAI;IAAEY,IAAI,EAAEX,OAAO,CAACY;EAAO,CAAE;EAElD,IAAI,OAAOL,KAAK,KAAK,WAAW,EAC9BG,OAAO,CAACH,KAAK,GAAG,MAAMd,mBAAmB,CAACK,MAAM,EAAE;IAChDc,OAAO,EAAEZ,OAAO,CAACY,OAAO;IACxBH,QAAQ,EAAE;GACX,CAAC;EAEJ,IACE,OAAOD,KAAK,CAACK,aAAa,KAAK,QAAQ,IACvC,OAAOT,QAAQ,KAAK,WAAW,EAC/B;IACA,IAAIU,kBAAkB,GAAG,WAAc,EAAC;IACxC,IAAI,OAAOZ,KAAK,EAAEa,IAAI,EAAED,kBAAkB,KAAK,WAAW,EAAE;MAC1DA,kBAAkB,GAChB,OAAOZ,KAAK,CAACa,IAAI,CAACD,kBAAkB,KAAK,QAAQ,GAC7CZ,KAAK,CAACa,IAAI,CAACD,kBAAkB,GAC7B,MAAMZ,KAAK,CAACa,IAAI,CAACD,kBAAkB,CAAC;QAClCN,KAAK;QACLE,OAAO,EAAEA;OACV,CAAC;;IAGV;IACA,IAAI,OAAOL,YAAY,KAAK,WAAW,EAAE;MACvC;MACAK,OAAO,CAACJ,oBAAoB,GAAGA,oBAAoB,IAAIQ,kBAAkB;MACzEJ,OAAO,CAACL,YAAY,GACjBG,KAAK,CAACK,aAAa,GAAG,IAAI,GAAI,IAAI,GAAGH,OAAO,CAACJ,oBAAoB;KACrE,MAAM;MACL,IACE,OAAOA,oBAAoB,KAAK,WAAW,IAC3CD,YAAY,GAAGS,kBAAkB,EAEjC,MAAM,IAAInB,SAAS,CACjB,mFAAmF,CACpF;MACHe,OAAO,CAACL,YAAY,GAAGA,YAAY;MACnCK,OAAO,CAACJ,oBAAoB,GAAGA,oBAAoB,IAAIQ,kBAAkB;;GAE5E,MAAM,IAAI,OAAOV,QAAQ,KAAK,WAAW,EAAE;IAC1C;IACA,IACE,OAAOC,YAAY,KAAK,WAAW,IACnC,OAAOC,oBAAoB,KAAK,WAAW,EAE3C,MAAM,IAAIX,SAAS,CAAC,uCAAuC,CAAC;IAE9D;IACAe,OAAO,CAACN,QAAQ,GAAI,CAAC,MAAMZ,WAAW,CAACM,MAAM,CAAC,IAAI,IAAI,GAAI,IAAI;;EAGhE,IAAI,OAAOK,GAAG,KAAK,WAAW,EAC5BO,OAAO,CAACP,GAAG,GAAG,MAAMb,WAAW,CAACQ,MAAM,EAAE;IACtC,GAAGY,OAAO;IACVV,OAAO,EAAE;MAAEY,OAAO,EAAEZ,OAAO,CAACY,OAAO;MAAEI,IAAI,EAAE;IAAU;GAC7B,CAAC;EAE7BpB,aAAa,CAACc,OAAkC,CAAC;EAEjD,OAAOA,OAKN;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}