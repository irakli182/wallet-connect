{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\irakl\\OneDrive\\Desktop\\wallet-connect\\node_modules\\viem\\src\\types\\chain.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { FormattedBlock } from '../utils/formatters/block.js'\nimport type { PrepareRequestParameters } from '../utils/transaction/prepareRequest.js'\nimport type { SerializeTransactionFn } from '../utils/transaction/serializeTransaction.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableGeneric,\n} from './transaction.js'\nimport type { IsUndefined, Prettify } from './utils.js'\n\nexport type Chain<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = import('@wagmi/chains').Chain & ChainConfig<formatters>\n\nexport type ChainConfig<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = {\n  formatters?: formatters | undefined\n  serializers?: ChainSerializers<formatters> | undefined\n  fees?: ChainFees<formatters> | undefined\n}\n\nexport type ChainContract = {\n  address: Address\n  blockCreated?: number\n}\n\nexport type ChainFees<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = {\n  defaultPriorityFee:\n    | bigint\n    | ((args: {\n        block: Prettify<FormattedBlock<{ formatters: formatters }>>\n        request: PrepareRequestParameters<\n          Omit<Chain, 'formatters'> & { formatters: formatters }\n        >\n      }) => Promise<bigint> | bigint)\n}\n\nexport type ChainFormatters = {\n  block?: ChainFormatter<'block'>\n  transaction?: ChainFormatter<'transaction'>\n  transactionReceipt?: ChainFormatter<'transactionReceipt'>\n  transactionRequest?: ChainFormatter<'transactionRequest'>\n}\n\nexport type ChainFormatter<type extends string = string> = {\n  format: (args: any) => any\n  type: type\n}\n\nexport type ChainSerializers<\n  formatters extends ChainFormatters | undefined = undefined,\n> = {\n  transaction?: SerializeTransactionFn<\n    formatters extends ChainFormatters\n      ? formatters['transactionRequest'] extends ChainFormatter\n        ? TransactionSerializableGeneric &\n            Parameters<formatters['transactionRequest']['format']>[0]\n        : TransactionSerializable\n      : TransactionSerializable\n  >\n}\n\n/////////////////////////////////////////////////////////////////////\n// Utils\n\nexport type ExtractChainFormatterExclude<\n  chain extends { formatters?: Chain['formatters'] } | undefined,\n  type extends keyof ChainFormatters,\n> = chain extends { formatters?: infer _Formatters extends ChainFormatters }\n  ? _Formatters[type] extends { exclude: infer Exclude }\n    ? Extract<Exclude, string[]>[number]\n    : ''\n  : ''\n\nexport type ExtractChainFormatterParameters<\n  chain extends { formatters?: Chain['formatters'] } | undefined,\n  type extends keyof ChainFormatters,\n  fallback,\n> = chain extends { formatters?: infer _Formatters extends ChainFormatters }\n  ? _Formatters[type] extends ChainFormatter\n    ? Parameters<_Formatters[type]['format']>[0]\n    : fallback\n  : fallback\n\nexport type ExtractChainFormatterReturnType<\n  chain extends { formatters?: Chain['formatters'] } | undefined,\n  type extends keyof ChainFormatters,\n  fallback,\n> = chain extends { formatters?: infer _Formatters extends ChainFormatters }\n  ? _Formatters[type] extends ChainFormatter\n    ? ReturnType<_Formatters[type]['format']>\n    : fallback\n  : fallback\n\nexport type GetChain<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined = undefined,\n> = IsUndefined<chain> extends true\n  ? { chain: chainOverride | null }\n  : { chain?: chainOverride | null }\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}