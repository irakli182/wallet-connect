{"ast":null,"code":"import { ChainNotConfiguredForConnectorError, ConnectorNotFoundError } from \"./chunk-ZCAPXGBX.js\";\nimport { normalizeChainId } from \"./chunk-OQILYQDO.js\";\nimport { Connector, __privateAdd, __privateGet, __privateSet, __publicField } from \"./chunk-QYMCVNHT.js\";\n\n// src/injected.ts\nimport { ResourceUnavailableRpcError, SwitchChainError, UserRejectedRequestError, createWalletClient, custom, getAddress, numberToHex } from \"viem\";\n\n// src/utils/getInjectedName.ts\nfunction getInjectedName(ethereum) {\n  if (!ethereum) return \"Injected\";\n  const getName = provider => {\n    if (provider.isApexWallet) return \"Apex Wallet\";\n    if (provider.isAvalanche) return \"Core Wallet\";\n    if (provider.isBackpack) return \"Backpack\";\n    if (provider.isBifrost) return \"Bifrost Wallet\";\n    if (provider.isBitKeep) return \"BitKeep\";\n    if (provider.isBitski) return \"Bitski\";\n    if (provider.isBlockWallet) return \"BlockWallet\";\n    if (provider.isBraveWallet) return \"Brave Wallet\";\n    if (provider.isCoin98) return \"Coin98 Wallet\";\n    if (provider.isCoinbaseWallet) return \"Coinbase Wallet\";\n    if (provider.isDawn) return \"Dawn Wallet\";\n    if (provider.isDefiant) return \"Defiant\";\n    if (provider.isDesig) return \"Desig Wallet\";\n    if (provider.isEnkrypt) return \"Enkrypt\";\n    if (provider.isExodus) return \"Exodus\";\n    if (provider.isFordefi) return \"Fordefi\";\n    if (provider.isFrame) return \"Frame\";\n    if (provider.isFrontier) return \"Frontier Wallet\";\n    if (provider.isGamestop) return \"GameStop Wallet\";\n    if (provider.isHaqqWallet) return \"HAQQ Wallet\";\n    if (provider.isHyperPay) return \"HyperPay Wallet\";\n    if (provider.isImToken) return \"ImToken\";\n    if (provider.isHaloWallet) return \"Halo Wallet\";\n    if (provider.isKuCoinWallet) return \"KuCoin Wallet\";\n    if (provider.isMathWallet) return \"MathWallet\";\n    if (provider.isNovaWallet) return \"Nova Wallet\";\n    if (provider.isOkxWallet || provider.isOKExWallet) return \"OKX Wallet\";\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) return \"1inch Wallet\";\n    if (provider.isOpera) return \"Opera\";\n    if (provider.isPhantom) return \"Phantom\";\n    if (provider.isPortal) return \"Ripio Portal\";\n    if (provider.isRabby) return \"Rabby Wallet\";\n    if (provider.isRainbow) return \"Rainbow\";\n    if (provider.isStatus) return \"Status\";\n    if (provider.isSubWallet) return \"SubWallet\";\n    if (provider.isTalisman) return \"Talisman\";\n    if (provider.isTally) return \"Taho\";\n    if (provider.isTokenPocket) return \"TokenPocket\";\n    if (provider.isTokenary) return \"Tokenary\";\n    if (provider.isTrust || provider.isTrustWallet) return \"Trust Wallet\";\n    if (provider.isTTWallet) return \"TTWallet\";\n    if (provider.isXDEFI) return \"XDEFI Wallet\";\n    if (provider.isZerion) return \"Zerion\";\n    if (provider.isMetaMask) return \"MetaMask\";\n  };\n  if (ethereum.providers?.length) {\n    const nameSet = /* @__PURE__ */new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length) return names;\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\n// src/injected.ts\nvar _provider;\nvar InjectedConnector = class extends Connector {\n  constructor({\n    chains,\n    options: options_\n  } = {}) {\n    const options = {\n      shimDisconnect: true,\n      getProvider() {\n        if (typeof window === \"undefined\") return;\n        const ethereum = window.ethereum;\n        if (ethereum?.providers) return ethereum.providers[0];\n        return ethereum;\n      },\n      ...options_\n    };\n    super({\n      chains,\n      options\n    });\n    __publicField(this, \"id\", \"injected\");\n    __publicField(this, \"name\");\n    __publicField(this, \"ready\");\n    __privateAdd(this, _provider, void 0);\n    __publicField(this, \"shimDisconnectKey\", `${this.id}.shimDisconnect`);\n    __publicField(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) this.emit(\"disconnect\");else this.emit(\"change\", {\n        account: getAddress(accounts[0])\n      });\n    });\n    __publicField(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    __publicField(this, \"onDisconnect\", async error => {\n      if (error.code === 1013) {\n        const provider = await this.getProvider();\n        if (provider) {\n          const isAuthorized = await this.getAccount();\n          if (isAuthorized) return;\n        }\n      }\n      this.emit(\"disconnect\");\n      if (this.options.shimDisconnect) this.storage?.removeItem(this.shimDisconnectKey);\n    });\n    const provider = options.getProvider();\n    if (typeof options.name === \"string\") this.name = options.name;else if (provider) {\n      const detectedName = getInjectedName(provider);\n      if (options.name) this.name = options.name(detectedName);else {\n        if (typeof detectedName === \"string\") this.name = detectedName;else this.name = detectedName[0];\n      }\n    } else this.name = \"Injected\";\n    this.ready = !!provider;\n  }\n  async connect({\n    chainId\n  } = {}) {\n    try {\n      const provider = await this.getProvider();\n      if (!provider) throw new ConnectorNotFoundError();\n      if (provider.on) {\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\n        provider.on(\"chainChanged\", this.onChainChanged);\n        provider.on(\"disconnect\", this.onDisconnect);\n      }\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = getAddress(accounts[0]);\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n      if (this.options.shimDisconnect) this.storage?.setItem(this.shimDisconnectKey, true);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        }\n      };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n      if (error.code === -32002) throw new ResourceUnavailableRpcError(error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) return;\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    if (this.options.shimDisconnect) this.storage?.removeItem(this.shimDisconnectKey);\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    return getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    return provider.request({\n      method: \"eth_chainId\"\n    }).then(normalizeChainId);\n  }\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider) __privateSet(this, _provider, provider);\n    return __privateGet(this, _provider);\n  }\n  async getWalletClient({\n    chainId\n  } = {}) {\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n    const chain = this.chains.find(x => x.id === chainId);\n    if (!provider) throw new Error(\"provider is required.\");\n    return createWalletClient({\n      account,\n      chain,\n      transport: custom(provider)\n    });\n  }\n  async isAuthorized() {\n    try {\n      if (this.options.shimDisconnect && !this.storage?.getItem(this.shimDisconnectKey)) return false;\n      const provider = await this.getProvider();\n      if (!provider) throw new ConnectorNotFoundError();\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    const id = numberToHex(chainId);\n    try {\n      await Promise.all([provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: id\n        }]\n      }), new Promise(res => this.on(\"change\", ({\n        chain\n      }) => {\n        if (chain?.id === chainId) res();\n      }))]);\n      return this.chains.find(x => x.id === chainId) ?? {\n        id: chainId,\n        name: `Chain ${id}`,\n        network: `${id}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpcUrls: {\n          default: {\n            http: [\"\"]\n          },\n          public: {\n            http: [\"\"]\n          }\n        }\n      };\n    } catch (error) {\n      const chain = this.chains.find(x => x.id === chainId);\n      if (!chain) throw new ChainNotConfiguredForConnectorError({\n        chainId,\n        connectorId: this.id\n      });\n      if (error.code === 4902 || error?.data?.originalError?.code === 4902) {\n        try {\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: id,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: [chain.rpcUrls.public?.http[0] ?? \"\"],\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          const currentChainId = await this.getChainId();\n          if (currentChainId !== chainId) throw new UserRejectedRequestError(new Error(\"User rejected switch after adding network.\"));\n          return chain;\n        } catch (error2) {\n          throw new UserRejectedRequestError(error2);\n        }\n      }\n      if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n      throw new SwitchChainError(error);\n    }\n  }\n  async watchAsset({\n    address,\n    decimals = 18,\n    image,\n    symbol\n  }) {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    return provider.request({\n      method: \"wallet_watchAsset\",\n      params: {\n        type: \"ERC20\",\n        options: {\n          address,\n          decimals,\n          image,\n          symbol\n        }\n      }\n    });\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n};\n_provider = new WeakMap();\nexport { InjectedConnector };","map":{"version":3,"names":["ChainNotConfiguredForConnectorError","ConnectorNotFoundError","normalizeChainId","Connector","__privateAdd","__privateGet","__privateSet","__publicField","ResourceUnavailableRpcError","SwitchChainError","UserRejectedRequestError","createWalletClient","custom","getAddress","numberToHex","getInjectedName","ethereum","getName","provider","isApexWallet","isAvalanche","isBackpack","isBifrost","isBitKeep","isBitski","isBlockWallet","isBraveWallet","isCoin98","isCoinbaseWallet","isDawn","isDefiant","isDesig","isEnkrypt","isExodus","isFordefi","isFrame","isFrontier","isGamestop","isHaqqWallet","isHyperPay","isImToken","isHaloWallet","isKuCoinWallet","isMathWallet","isNovaWallet","isOkxWallet","isOKExWallet","isOneInchIOSWallet","isOneInchAndroidWallet","isOpera","isPhantom","isPortal","isRabby","isRainbow","isStatus","isSubWallet","isTalisman","isTally","isTokenPocket","isTokenary","isTrust","isTrustWallet","isTTWallet","isXDEFI","isZerion","isMetaMask","providers","length","nameSet","Set","unknownCount","name","add","names","_provider","InjectedConnector","constructor","chains","options","options_","shimDisconnect","getProvider","window","id","accounts","emit","account","chainId","unsupported","isChainUnsupported","chain","error","code","isAuthorized","getAccount","storage","removeItem","shimDisconnectKey","detectedName","ready","connect","on","onAccountsChanged","onChainChanged","onDisconnect","type","request","method","getChainId","switchChain","setItem","isUserRejectedRequestError","disconnect","removeListener","then","getWalletClient","Promise","all","find","x","Error","transport","getItem","params","res","network","nativeCurrency","decimals","symbol","rpcUrls","default","http","public","connectorId","data","originalError","chainName","blockExplorerUrls","getBlockExplorerUrls","currentChainId","error2","watchAsset","address","image","WeakMap"],"sources":["C:/Users/irakl/OneDrive/Desktop/wallet-connect/node_modules/@wagmi/core/node_modules/@wagmi/connectors/dist/chunk-YZRVUC6Y.js"],"sourcesContent":["import {\n  ChainNotConfiguredForConnectorError,\n  ConnectorNotFoundError\n} from \"./chunk-ZCAPXGBX.js\";\nimport {\n  normalizeChainId\n} from \"./chunk-OQILYQDO.js\";\nimport {\n  Connector,\n  __privateAdd,\n  __privateGet,\n  __privateSet,\n  __publicField\n} from \"./chunk-QYMCVNHT.js\";\n\n// src/injected.ts\nimport {\n  ResourceUnavailableRpcError,\n  SwitchChainError,\n  UserRejectedRequestError,\n  createWalletClient,\n  custom,\n  getAddress,\n  numberToHex\n} from \"viem\";\n\n// src/utils/getInjectedName.ts\nfunction getInjectedName(ethereum) {\n  if (!ethereum)\n    return \"Injected\";\n  const getName = (provider) => {\n    if (provider.isApexWallet)\n      return \"Apex Wallet\";\n    if (provider.isAvalanche)\n      return \"Core Wallet\";\n    if (provider.isBackpack)\n      return \"Backpack\";\n    if (provider.isBifrost)\n      return \"Bifrost Wallet\";\n    if (provider.isBitKeep)\n      return \"BitKeep\";\n    if (provider.isBitski)\n      return \"Bitski\";\n    if (provider.isBlockWallet)\n      return \"BlockWallet\";\n    if (provider.isBraveWallet)\n      return \"Brave Wallet\";\n    if (provider.isCoin98)\n      return \"Coin98 Wallet\";\n    if (provider.isCoinbaseWallet)\n      return \"Coinbase Wallet\";\n    if (provider.isDawn)\n      return \"Dawn Wallet\";\n    if (provider.isDefiant)\n      return \"Defiant\";\n    if (provider.isDesig)\n      return \"Desig Wallet\";\n    if (provider.isEnkrypt)\n      return \"Enkrypt\";\n    if (provider.isExodus)\n      return \"Exodus\";\n    if (provider.isFordefi)\n      return \"Fordefi\";\n    if (provider.isFrame)\n      return \"Frame\";\n    if (provider.isFrontier)\n      return \"Frontier Wallet\";\n    if (provider.isGamestop)\n      return \"GameStop Wallet\";\n    if (provider.isHaqqWallet)\n      return \"HAQQ Wallet\";\n    if (provider.isHyperPay)\n      return \"HyperPay Wallet\";\n    if (provider.isImToken)\n      return \"ImToken\";\n    if (provider.isHaloWallet)\n      return \"Halo Wallet\";\n    if (provider.isKuCoinWallet)\n      return \"KuCoin Wallet\";\n    if (provider.isMathWallet)\n      return \"MathWallet\";\n    if (provider.isNovaWallet)\n      return \"Nova Wallet\";\n    if (provider.isOkxWallet || provider.isOKExWallet)\n      return \"OKX Wallet\";\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet)\n      return \"1inch Wallet\";\n    if (provider.isOpera)\n      return \"Opera\";\n    if (provider.isPhantom)\n      return \"Phantom\";\n    if (provider.isPortal)\n      return \"Ripio Portal\";\n    if (provider.isRabby)\n      return \"Rabby Wallet\";\n    if (provider.isRainbow)\n      return \"Rainbow\";\n    if (provider.isStatus)\n      return \"Status\";\n    if (provider.isSubWallet)\n      return \"SubWallet\";\n    if (provider.isTalisman)\n      return \"Talisman\";\n    if (provider.isTally)\n      return \"Taho\";\n    if (provider.isTokenPocket)\n      return \"TokenPocket\";\n    if (provider.isTokenary)\n      return \"Tokenary\";\n    if (provider.isTrust || provider.isTrustWallet)\n      return \"Trust Wallet\";\n    if (provider.isTTWallet)\n      return \"TTWallet\";\n    if (provider.isXDEFI)\n      return \"XDEFI Wallet\";\n    if (provider.isZerion)\n      return \"Zerion\";\n    if (provider.isMetaMask)\n      return \"MetaMask\";\n  };\n  if (ethereum.providers?.length) {\n    const nameSet = /* @__PURE__ */ new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length)\n      return names;\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\n// src/injected.ts\nvar _provider;\nvar InjectedConnector = class extends Connector {\n  constructor({\n    chains,\n    options: options_\n  } = {}) {\n    const options = {\n      shimDisconnect: true,\n      getProvider() {\n        if (typeof window === \"undefined\")\n          return;\n        const ethereum = window.ethereum;\n        if (ethereum?.providers)\n          return ethereum.providers[0];\n        return ethereum;\n      },\n      ...options_\n    };\n    super({ chains, options });\n    __publicField(this, \"id\", \"injected\");\n    __publicField(this, \"name\");\n    __publicField(this, \"ready\");\n    __privateAdd(this, _provider, void 0);\n    __publicField(this, \"shimDisconnectKey\", `${this.id}.shimDisconnect`);\n    __publicField(this, \"onAccountsChanged\", (accounts) => {\n      if (accounts.length === 0)\n        this.emit(\"disconnect\");\n      else\n        this.emit(\"change\", {\n          account: getAddress(accounts[0])\n        });\n    });\n    __publicField(this, \"onChainChanged\", (chainId) => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", { chain: { id, unsupported } });\n    });\n    __publicField(this, \"onDisconnect\", async (error) => {\n      if (error.code === 1013) {\n        const provider = await this.getProvider();\n        if (provider) {\n          const isAuthorized = await this.getAccount();\n          if (isAuthorized)\n            return;\n        }\n      }\n      this.emit(\"disconnect\");\n      if (this.options.shimDisconnect)\n        this.storage?.removeItem(this.shimDisconnectKey);\n    });\n    const provider = options.getProvider();\n    if (typeof options.name === \"string\")\n      this.name = options.name;\n    else if (provider) {\n      const detectedName = getInjectedName(provider);\n      if (options.name)\n        this.name = options.name(detectedName);\n      else {\n        if (typeof detectedName === \"string\")\n          this.name = detectedName;\n        else\n          this.name = detectedName[0];\n      }\n    } else\n      this.name = \"Injected\";\n    this.ready = !!provider;\n  }\n  async connect({ chainId } = {}) {\n    try {\n      const provider = await this.getProvider();\n      if (!provider)\n        throw new ConnectorNotFoundError();\n      if (provider.on) {\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\n        provider.on(\"chainChanged\", this.onChainChanged);\n        provider.on(\"disconnect\", this.onDisconnect);\n      }\n      this.emit(\"message\", { type: \"connecting\" });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = getAddress(accounts[0]);\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n      if (this.options.shimDisconnect)\n        this.storage?.setItem(this.shimDisconnectKey, true);\n      return { account, chain: { id, unsupported } };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error))\n        throw new UserRejectedRequestError(error);\n      if (error.code === -32002)\n        throw new ResourceUnavailableRpcError(error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    if (!provider?.removeListener)\n      return;\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    if (this.options.shimDisconnect)\n      this.storage?.removeItem(this.shimDisconnectKey);\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider)\n      throw new ConnectorNotFoundError();\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    return getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider)\n      throw new ConnectorNotFoundError();\n    return provider.request({ method: \"eth_chainId\" }).then(normalizeChainId);\n  }\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider)\n      __privateSet(this, _provider, provider);\n    return __privateGet(this, _provider);\n  }\n  async getWalletClient({\n    chainId\n  } = {}) {\n    const [provider, account] = await Promise.all([\n      this.getProvider(),\n      this.getAccount()\n    ]);\n    const chain = this.chains.find((x) => x.id === chainId);\n    if (!provider)\n      throw new Error(\"provider is required.\");\n    return createWalletClient({\n      account,\n      chain,\n      transport: custom(provider)\n    });\n  }\n  async isAuthorized() {\n    try {\n      if (this.options.shimDisconnect && !this.storage?.getItem(this.shimDisconnectKey))\n        return false;\n      const provider = await this.getProvider();\n      if (!provider)\n        throw new ConnectorNotFoundError();\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider)\n      throw new ConnectorNotFoundError();\n    const id = numberToHex(chainId);\n    try {\n      await Promise.all([\n        provider.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: id }]\n        }),\n        new Promise(\n          (res) => this.on(\"change\", ({ chain }) => {\n            if (chain?.id === chainId)\n              res();\n          })\n        )\n      ]);\n      return this.chains.find((x) => x.id === chainId) ?? {\n        id: chainId,\n        name: `Chain ${id}`,\n        network: `${id}`,\n        nativeCurrency: { name: \"Ether\", decimals: 18, symbol: \"ETH\" },\n        rpcUrls: { default: { http: [\"\"] }, public: { http: [\"\"] } }\n      };\n    } catch (error) {\n      const chain = this.chains.find((x) => x.id === chainId);\n      if (!chain)\n        throw new ChainNotConfiguredForConnectorError({\n          chainId,\n          connectorId: this.id\n        });\n      if (error.code === 4902 || error?.data?.originalError?.code === 4902) {\n        try {\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId: id,\n                chainName: chain.name,\n                nativeCurrency: chain.nativeCurrency,\n                rpcUrls: [chain.rpcUrls.public?.http[0] ?? \"\"],\n                blockExplorerUrls: this.getBlockExplorerUrls(chain)\n              }\n            ]\n          });\n          const currentChainId = await this.getChainId();\n          if (currentChainId !== chainId)\n            throw new UserRejectedRequestError(\n              new Error(\"User rejected switch after adding network.\")\n            );\n          return chain;\n        } catch (error2) {\n          throw new UserRejectedRequestError(error2);\n        }\n      }\n      if (this.isUserRejectedRequestError(error))\n        throw new UserRejectedRequestError(error);\n      throw new SwitchChainError(error);\n    }\n  }\n  async watchAsset({\n    address,\n    decimals = 18,\n    image,\n    symbol\n  }) {\n    const provider = await this.getProvider();\n    if (!provider)\n      throw new ConnectorNotFoundError();\n    return provider.request({\n      method: \"wallet_watchAsset\",\n      params: {\n        type: \"ERC20\",\n        options: {\n          address,\n          decimals,\n          image,\n          symbol\n        }\n      }\n    });\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n};\n_provider = new WeakMap();\n\nexport {\n  InjectedConnector\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}