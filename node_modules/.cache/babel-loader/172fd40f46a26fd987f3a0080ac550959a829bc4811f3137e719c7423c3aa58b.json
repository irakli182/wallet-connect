{"ast":null,"code":"export function narrow(value) {\n  return value;\n}","map":{"version":3,"names":["narrow","value"],"sources":["C:\\Users\\irakl\\OneDrive\\Desktop\\wallet-connect\\node_modules\\viem\\node_modules\\abitype\\src\\narrow.ts"],"sourcesContent":["/**\n * Infers embedded primitive type of any type\n *\n * @param T - Type to infer\n * @returns Embedded type of {@link TType}\n *\n * @example\n * type Result = Narrow<['foo', 'bar', 1]>\n */\n// s/o https://twitter.com/hd_nvim/status/1578567206190780417\nexport type Narrow<TType> =\n  | (TType extends Function ? TType : never)\n  | (TType extends string | number | boolean | bigint ? TType : never)\n  | (TType extends [] ? [] : never)\n  | {\n      [K in keyof TType]: Narrow<TType[K]>\n    }\n\n/**\n * Infers embedded primitive type of any type\n * Same as `as const` but without setting the object as readonly and without needing the user to use it.\n *\n * @param value - Value to infer\n * @returns Value with embedded type inferred\n *\n * @example\n * const result = narrow(['foo', 'bar', 1])\n */\nexport function narrow<TType>(value: Narrow<TType>) {\n  return value\n}\n"],"mappings":"AA4BA,OAAM,SAAUA,MAAMA,CAAQC,KAAoB;EAChD,OAAOA,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}