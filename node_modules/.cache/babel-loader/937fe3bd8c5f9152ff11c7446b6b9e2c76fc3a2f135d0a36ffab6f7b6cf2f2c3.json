{"ast":null,"code":"'use client';\n\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.mjs';\nimport * as React from 'react';\nimport { persistQueryClient } from '@tanstack/query-persist-client-core';\nimport { QueryClientProvider, IsRestoringProvider } from '@tanstack/react-query';\nconst PersistQueryClientProvider = ({\n  client,\n  children,\n  persistOptions,\n  onSuccess,\n  ...props\n}) => {\n  const [isRestoring, setIsRestoring] = React.useState(true);\n  const refs = React.useRef({\n    persistOptions,\n    onSuccess\n  });\n  React.useEffect(() => {\n    refs.current = {\n      persistOptions,\n      onSuccess\n    };\n  });\n  React.useEffect(() => {\n    let isStale = false;\n    setIsRestoring(true);\n    const [unsubscribe, promise] = persistQueryClient({\n      ...refs.current.persistOptions,\n      queryClient: client\n    });\n    promise.then(() => {\n      if (!isStale) {\n        refs.current.onSuccess == null ? void 0 : refs.current.onSuccess();\n        setIsRestoring(false);\n      }\n    });\n    return () => {\n      isStale = true;\n      unsubscribe();\n    };\n  }, [client]);\n  return /*#__PURE__*/React.createElement(QueryClientProvider, _extends({\n    client: client\n  }, props), /*#__PURE__*/React.createElement(IsRestoringProvider, {\n    value: isRestoring\n  }, children));\n};\nexport { PersistQueryClientProvider };","map":{"version":3,"names":["PersistQueryClientProvider","refs","React","useRef","onSuccess","unsubscribe","promise","persistQueryClient","current","persistOptions","queryClient","client","isStale","createElement","QueryClientProvider","_extends","value","isRestoring"],"sources":["C:\\Users\\irakl\\OneDrive\\Desktop\\wallet-connect\\node_modules\\@tanstack\\react-query-persist-client\\src\\PersistQueryClientProvider.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { persistQueryClient } from '@tanstack/query-persist-client-core'\nimport { IsRestoringProvider, QueryClientProvider } from '@tanstack/react-query'\nimport type { PersistQueryClientOptions } from '@tanstack/query-persist-client-core'\nimport type { QueryClientProviderProps } from '@tanstack/react-query'\n\nexport type PersistQueryClientProviderProps = QueryClientProviderProps & {\n  persistOptions: Omit<PersistQueryClientOptions, 'queryClient'>\n  onSuccess?: () => void\n}\n\nexport const PersistQueryClientProvider = ({\n  client,\n  children,\n  persistOptions,\n  onSuccess,\n  ...props\n}: PersistQueryClientProviderProps): JSX.Element => {\n  const [isRestoring, setIsRestoring] = React.useState(true)\n  const refs = React.useRef({ persistOptions, onSuccess })\n\n  React.useEffect(() => {\n    refs.current = { persistOptions, onSuccess }\n  })\n\n  React.useEffect(() => {\n    let isStale = false\n    setIsRestoring(true)\n    const [unsubscribe, promise] = persistQueryClient({\n      ...refs.current.persistOptions,\n      queryClient: client,\n    })\n\n    promise.then(() => {\n      if (!isStale) {\n        refs.current.onSuccess?.()\n        setIsRestoring(false)\n      }\n    })\n\n    return () => {\n      isStale = true\n      unsubscribe()\n    }\n  }, [client])\n\n  return (\n    <QueryClientProvider client={client} {...props}>\n      <IsRestoringProvider value={isRestoring}>{children}</IsRestoringProvider>\n    </QueryClientProvider>\n  )\n}\n"],"mappings":";;;;;;AAaO,MAAAA,0BAAA,GAAAA,CAAA;;;;;;AAAoC;;EAQzC,MAAAC,IAAA,GAAAC,KAAA,CAAAC,MAAA;;IAA4CC;EAAlB;;;;MAGSA;;;;;;IAMjC,OAAAC,WAAA,EAAAC,OAAA,IAAAC,kBAAA;MAAA,GAAAN,IAAA,CAAAO,OAAA,CAAAC,cAAA;MAEEC,WAAA,EAAAC;IAFgD;;;;;MAS/C;;IAGH;MACEC,OAAA;;;;EAKJ,oBAAAV,KAAA,CAAAW,aAAA,CAAAC,mBAAA,EAAAC,QAAA;IACuBJ,MAAA,EAAAA;;IACEK,KAAA,EAAAC;;AAG1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}