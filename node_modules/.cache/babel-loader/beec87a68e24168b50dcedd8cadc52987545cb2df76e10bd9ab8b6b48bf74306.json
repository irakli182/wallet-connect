{"ast":null,"code":"// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\nimport { encodeAbiParameters } from '../abi/encodeAbiParameters.js';\nimport { concat } from '../data/concat.js';\nimport { toHex } from '../encoding/toHex.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { validateTypedData } from '../typedData.js';\nexport function hashTypedData({\n  domain: domain_,\n  message,\n  primaryType,\n  types: types_\n}) {\n  const domain = typeof domain_ === 'undefined' ? {} : domain_;\n  const types = {\n    EIP712Domain: [typeof domain?.name === 'string' && {\n      name: 'name',\n      type: 'string'\n    }, domain?.version && {\n      name: 'version',\n      type: 'string'\n    }, typeof domain?.chainId === 'number' && {\n      name: 'chainId',\n      type: 'uint256'\n    }, domain?.verifyingContract && {\n      name: 'verifyingContract',\n      type: 'address'\n    }, domain?.salt && {\n      name: 'salt',\n      type: 'bytes32'\n    }].filter(Boolean),\n    ...types_\n  };\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types\n  });\n  const parts = ['0x1901'];\n  if (domain) parts.push(hashDomain({\n    domain,\n    types: types\n  }));\n  if (primaryType !== 'EIP712Domain') {\n    parts.push(hashStruct({\n      data: message,\n      primaryType: primaryType,\n      types: types\n    }));\n  }\n  return keccak256(concat(parts));\n}\nfunction hashDomain({\n  domain,\n  types\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types\n  });\n}\nfunction hashStruct({\n  data,\n  primaryType,\n  types\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types\n  });\n  return keccak256(encoded);\n}\nfunction encodeData({\n  data,\n  primaryType,\n  types\n}) {\n  const encodedTypes = [{\n    type: 'bytes32'\n  }];\n  const encodedValues = [hashType({\n    primaryType,\n    types\n  })];\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name]\n    });\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n  return encodeAbiParameters(encodedTypes, encodedValues);\n}\nfunction hashType({\n  primaryType,\n  types\n}) {\n  const encodedHashType = toHex(encodeType({\n    primaryType,\n    types\n  }));\n  return keccak256(encodedHashType);\n}\nfunction encodeType({\n  primaryType,\n  types\n}) {\n  let result = '';\n  const unsortedDeps = findTypeDependencies({\n    primaryType,\n    types\n  });\n  unsortedDeps.delete(primaryType);\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    result += `${type}(${types[type].map(({\n      name,\n      type: t\n    }) => `${t} ${name}`).join(',')})`;\n  }\n  return result;\n}\nfunction findTypeDependencies({\n  primaryType: primaryType_,\n  types\n}, results = new Set()) {\n  const match = primaryType_.match(/^\\w*/u);\n  const primaryType = match?.[0];\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n  results.add(primaryType);\n  for (const field of types[primaryType]) {\n    findTypeDependencies({\n      primaryType: field.type,\n      types\n    }, results);\n  }\n  return results;\n}\nfunction encodeField({\n  types,\n  name,\n  type,\n  value\n}) {\n  if (types[type] !== undefined) {\n    return [{\n      type: 'bytes32'\n    }, keccak256(encodeData({\n      data: value,\n      primaryType: type,\n      types\n    }))];\n  }\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : '';\n    value = `0x${prepend + value.slice(2)}`;\n    return [{\n      type: 'bytes32'\n    }, keccak256(value)];\n  }\n  if (type === 'string') return [{\n    type: 'bytes32'\n  }, keccak256(toHex(value))];\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map(item => encodeField({\n      name,\n      type: parsedType,\n      types,\n      value: item\n    }));\n    return [{\n      type: 'bytes32'\n    }, keccak256(encodeAbiParameters(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v)))];\n  }\n  return [{\n    type\n  }, value];\n}","map":{"version":3,"names":["encodeAbiParameters","concat","toHex","keccak256","validateTypedData","hashTypedData","domain","domain_","message","primaryType","types","types_","EIP712Domain","name","type","version","chainId","verifyingContract","salt","filter","Boolean","parts","push","hashDomain","hashStruct","data","encoded","encodeData","encodedTypes","encodedValues","hashType","field","value","encodeField","encodedHashType","encodeType","result","unsortedDeps","findTypeDependencies","delete","deps","Array","from","sort","map","t","join","primaryType_","results","Set","match","has","undefined","add","prepend","length","slice","lastIndexOf","parsedType","typeValuePairs","item","v"],"sources":["C:\\Users\\irakl\\OneDrive\\Desktop\\wallet-connect\\node_modules\\viem\\src\\utils\\signature\\hashTypedData.ts"],"sourcesContent":["// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\n\nimport type { AbiParameter, TypedData, TypedDataDomain } from 'abitype'\n\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport { encodeAbiParameters } from '../abi/encodeAbiParameters.js'\nimport { concat } from '../data/concat.js'\nimport { toHex } from '../encoding/toHex.js'\nimport { keccak256 } from '../hash/keccak256.js'\nimport { validateTypedData } from '../typedData.js'\n\ntype MessageTypeProperty = {\n  name: string\n  type: string\n}\n\nexport type HashTypedDataParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n> = TypedDataDefinition<TTypedData, TPrimaryType>\n\nexport type HashTypedDataReturnType = Hex\n\nexport function hashTypedData<\n  TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string = string,\n>({\n  domain: domain_,\n  message,\n  primaryType,\n  types: types_,\n}: HashTypedDataParameters<TTypedData, TPrimaryType>): HashTypedDataReturnType {\n  const domain: TypedDataDomain = typeof domain_ === 'undefined' ? {} : domain_\n  const types = {\n    EIP712Domain: [\n      typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n      domain?.version && { name: 'version', type: 'string' },\n      typeof domain?.chainId === 'number' && {\n        name: 'chainId',\n        type: 'uint256',\n      },\n      domain?.verifyingContract && {\n        name: 'verifyingContract',\n        type: 'address',\n      },\n      domain?.salt && { name: 'salt', type: 'bytes32' },\n    ].filter(Boolean),\n    ...(types_ as TTypedData),\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types,\n  } as TypedDataDefinition)\n\n  const parts: Hex[] = ['0x1901']\n  if (domain)\n    parts.push(\n      hashDomain({\n        domain,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  if (primaryType !== 'EIP712Domain') {\n    parts.push(\n      hashStruct({\n        data: message,\n        primaryType: primaryType as string,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n  }\n\n  return keccak256(concat(parts))\n}\n\nfunction hashDomain({\n  domain,\n  types,\n}: {\n  domain: TypedDataDomain\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types,\n  })\n}\n\nfunction hashStruct({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types,\n  })\n  return keccak256(encoded)\n}\n\nfunction encodeData({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encodedTypes: AbiParameter[] = [{ type: 'bytes32' }]\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\n\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name],\n    })\n    encodedTypes.push(type)\n    encodedValues.push(value)\n  }\n\n  return encodeAbiParameters(encodedTypes, encodedValues)\n}\n\nfunction hashType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encodedHashType = toHex(encodeType({ primaryType, types }))\n  return keccak256(encodedHashType)\n}\n\nfunction encodeType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  let result = ''\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\n  unsortedDeps.delete(primaryType)\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\n  for (const type of deps) {\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`\n  }\n\n  return result\n}\n\nfunction findTypeDependencies(\n  {\n    primaryType: primaryType_,\n    types,\n  }: {\n    primaryType: string\n    types: Record<string, MessageTypeProperty[]>\n  },\n  results: Set<string> = new Set(),\n): Set<string> {\n  const match = primaryType_.match(/^\\w*/u)\n  const primaryType = match?.[0]!\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results\n  }\n\n  results.add(primaryType)\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies({ primaryType: field.type, types }, results)\n  }\n  return results\n}\n\nfunction encodeField({\n  types,\n  name,\n  type,\n  value,\n}: {\n  types: Record<string, MessageTypeProperty[]>\n  name: string\n  type: string\n  value: any\n}): [type: AbiParameter, value: any] {\n  if (types[type] !== undefined) {\n    return [\n      { type: 'bytes32' },\n      keccak256(encodeData({ data: value, primaryType: type, types })),\n    ]\n  }\n\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : ''\n    value = `0x${prepend + value.slice(2)}`\n    return [{ type: 'bytes32' }, keccak256(value)]\n  }\n\n  if (type === 'string') return [{ type: 'bytes32' }, keccak256(toHex(value))]\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['))\n    const typeValuePairs = (value as [AbiParameter, any][]).map((item) =>\n      encodeField({\n        name,\n        type: parsedType,\n        types,\n        value: item,\n      }),\n    )\n    return [\n      { type: 'bytes32' },\n      keccak256(\n        encodeAbiParameters(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ]\n  }\n\n  return [{ type }, value]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}