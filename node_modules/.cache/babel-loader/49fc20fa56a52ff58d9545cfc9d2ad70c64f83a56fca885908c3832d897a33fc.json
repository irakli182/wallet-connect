{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\irakl\\\\OneDrive\\\\Desktop\\\\wallet-connect\\\\src\\\\App.js\";\nimport { EthereumClient, w3mConnectors, w3mProvider } from '@web3modal/ethereum';\nimport { Web3Modal } from '@web3modal/react';\nimport { configureChains, createConfig, WagmiConfig } from 'wagmi';\nimport { arbitrum, mainnet, polygon } from 'wagmi/chains';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const chains = [arbitrum, mainnet, polygon];\n  const projectId = 'YOUR_PROJECT_ID';\n  const {\n    publicClient\n  } = configureChains(chains, [w3mProvider({\n    projectId\n  })]);\n  const wagmiConfig = createConfig({\n    autoConnect: true,\n    connectors: w3mConnectors({\n      projectId,\n      chains\n    }),\n    publicClient\n  });\n  const ethereumClient = new EthereumClient(wagmiConfig, chains);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(WagmiConfig, {\n      config: wagmiConfig,\n      children: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Web3Modal, {\n      projectId: projectId,\n      ethereumClient: ethereumClient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["EthereumClient","w3mConnectors","w3mProvider","Web3Modal","configureChains","createConfig","WagmiConfig","arbitrum","mainnet","polygon","jsxDEV","_jsxDEV","Fragment","_Fragment","App","chains","projectId","publicClient","wagmiConfig","autoConnect","connectors","ethereumClient","children","config","HomePage","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/irakl/OneDrive/Desktop/wallet-connect/src/App.js"],"sourcesContent":["import { EthereumClient, w3mConnectors, w3mProvider } from '@web3modal/ethereum'\nimport { Web3Modal } from '@web3modal/react'\nimport { configureChains, createConfig, WagmiConfig } from 'wagmi'\nimport { arbitrum, mainnet, polygon } from 'wagmi/chains'\n\n\nfunction App() {\n\n  const chains = [arbitrum, mainnet, polygon]\n  const projectId = 'YOUR_PROJECT_ID'\n\n  const { publicClient } = configureChains(chains, [w3mProvider({ projectId })])\n  const wagmiConfig = createConfig({\n    autoConnect: true,\n    connectors: w3mConnectors({ projectId, chains }),\n    publicClient\n  })\n  const ethereumClient = new EthereumClient(wagmiConfig, chains)\n\n  return (\n    <>\n      <WagmiConfig config={wagmiConfig}>\n        <HomePage />\n      </WagmiConfig>\n\n      <Web3Modal projectId={projectId} ethereumClient={ethereumClient} />\n    </>\n  )\n}"],"mappings":";AAAA,SAASA,cAAc,EAAEC,aAAa,EAAEC,WAAW,QAAQ,qBAAqB;AAChF,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,eAAe,EAAEC,YAAY,EAAEC,WAAW,QAAQ,OAAO;AAClE,SAASC,QAAQ,EAAEC,OAAO,EAAEC,OAAO,QAAQ,cAAc;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGzD,SAASC,GAAGA,CAAA,EAAG;EAEb,MAAMC,MAAM,GAAG,CAACR,QAAQ,EAAEC,OAAO,EAAEC,OAAO,CAAC;EAC3C,MAAMO,SAAS,GAAG,iBAAiB;EAEnC,MAAM;IAAEC;EAAa,CAAC,GAAGb,eAAe,CAACW,MAAM,EAAE,CAACb,WAAW,CAAC;IAAEc;EAAU,CAAC,CAAC,CAAC,CAAC;EAC9E,MAAME,WAAW,GAAGb,YAAY,CAAC;IAC/Bc,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAEnB,aAAa,CAAC;MAAEe,SAAS;MAAED;IAAO,CAAC,CAAC;IAChDE;EACF,CAAC,CAAC;EACF,MAAMI,cAAc,GAAG,IAAIrB,cAAc,CAACkB,WAAW,EAAEH,MAAM,CAAC;EAE9D,oBACEJ,OAAA,CAAAE,SAAA;IAAAS,QAAA,gBACEX,OAAA,CAACL,WAAW;MAACiB,MAAM,EAAEL,WAAY;MAAAI,QAAA,eAC/BX,OAAA,CAACa,QAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAEdjB,OAAA,CAACR,SAAS;MAACa,SAAS,EAAEA,SAAU;MAACK,cAAc,EAAEA;IAAe;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACnE,CAAC;AAEP;AAACC,EAAA,GAtBQf,GAAG;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}