{"ast":null,"code":"import '../../types/chain.js';\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { defineBlock } from '../../utils/formatters/block.js';\nimport { defineTransaction, formatTransaction } from '../../utils/formatters/transaction.js';\nimport { defineTransactionReceipt } from '../../utils/formatters/transactionReceipt.js';\nimport { defineTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nexport const formattersCelo = {\n  block: /*#__PURE__*/defineBlock({\n    exclude: ['difficulty', 'gasLimit', 'mixHash', 'nonce', 'uncles'],\n    format(args) {\n      const transactions = args.transactions?.map(transaction => {\n        if (typeof transaction === 'string') return transaction;\n        return {\n          ...formatTransaction(transaction),\n          feeCurrency: transaction.feeCurrency,\n          gatewayFee: transaction.gatewayFee ? hexToBigInt(transaction.gatewayFee) : null,\n          gatewayFeeRecipient: transaction.gatewayFeeRecipient\n        };\n      });\n      return {\n        randomness: args.randomness,\n        transactions\n      };\n    }\n  }),\n  transaction: /*#__PURE__*/defineTransaction({\n    format(args) {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee: args.gatewayFee ? hexToBigInt(args.gatewayFee) : null,\n        gatewayFeeRecipient: args.gatewayFeeRecipient\n      };\n    }\n  }),\n  transactionReceipt: /*#__PURE__*/defineTransactionReceipt({\n    format(args) {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee: args.gatewayFee ? hexToBigInt(args.gatewayFee) : null,\n        gatewayFeeRecipient: args.gatewayFeeRecipient\n      };\n    }\n  }),\n  transactionRequest: /*#__PURE__*/defineTransactionRequest({\n    format(args) {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee: typeof args.gatewayFee !== 'undefined' ? numberToHex(args.gatewayFee) : undefined,\n        gatewayFeeRecipient: args.gatewayFeeRecipient\n      };\n    }\n  })\n};","map":{"version":3,"names":["hexToBigInt","numberToHex","defineBlock","defineTransaction","formatTransaction","defineTransactionReceipt","defineTransactionRequest","formattersCelo","block","exclude","format","args","transactions","map","transaction","feeCurrency","gatewayFee","gatewayFeeRecipient","randomness","transactionReceipt","transactionRequest","undefined"],"sources":["C:\\Users\\irakl\\OneDrive\\Desktop\\wallet-connect\\node_modules\\viem\\src\\chains\\celo\\formatters.ts"],"sourcesContent":["import { type ChainFormatters } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport { defineBlock } from '../../utils/formatters/block.js'\nimport {\n  defineTransaction,\n  formatTransaction,\n} from '../../utils/formatters/transaction.js'\nimport { defineTransactionReceipt } from '../../utils/formatters/transactionReceipt.js'\nimport { defineTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport type {\n  CeloBlockOverrides,\n  CeloRpcTransaction,\n  CeloRpcTransactionOverrides,\n  CeloRpcTransactionReceiptOverrides,\n  CeloRpcTransactionRequestOverrides,\n  CeloTransaction,\n  CeloTransactionOverrides,\n  CeloTransactionReceiptOverrides,\n  CeloTransactionRequestOverrides,\n} from './types.js'\n\nexport const formattersCelo = {\n  block: /*#__PURE__*/ defineBlock({\n    exclude: ['difficulty', 'gasLimit', 'mixHash', 'nonce', 'uncles'],\n    format(\n      args: CeloBlockOverrides & {\n        transactions: Hash[] | CeloRpcTransaction[]\n      },\n    ): CeloBlockOverrides & {\n      transactions: Hash[] | CeloTransaction[]\n    } {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        return {\n          ...formatTransaction(transaction),\n          feeCurrency: transaction.feeCurrency,\n          gatewayFee: transaction.gatewayFee\n            ? hexToBigInt(transaction.gatewayFee)\n            : null,\n          gatewayFeeRecipient: transaction.gatewayFeeRecipient,\n        }\n      }) as Hash[] | CeloTransaction[]\n      return {\n        randomness: args.randomness,\n        transactions,\n      }\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: CeloRpcTransactionOverrides): CeloTransactionOverrides {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee: args.gatewayFee ? hexToBigInt(args.gatewayFee) : null,\n        gatewayFeeRecipient: args.gatewayFeeRecipient,\n      }\n    },\n  }),\n  transactionReceipt: /*#__PURE__*/ defineTransactionReceipt({\n    format(\n      args: CeloRpcTransactionReceiptOverrides,\n    ): CeloTransactionReceiptOverrides {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee: args.gatewayFee ? hexToBigInt(args.gatewayFee) : null,\n        gatewayFeeRecipient: args.gatewayFeeRecipient,\n      }\n    },\n  }),\n  transactionRequest: /*#__PURE__*/ defineTransactionRequest({\n    format(\n      args: CeloTransactionRequestOverrides,\n    ): CeloRpcTransactionRequestOverrides {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee:\n          typeof args.gatewayFee !== 'undefined'\n            ? numberToHex(args.gatewayFee)\n            : undefined,\n        gatewayFeeRecipient: args.gatewayFeeRecipient,\n      }\n    },\n  }),\n} as const satisfies ChainFormatters\n"],"mappings":"AAAA,OAAqC,sBAAsB;AAE3D,SAASA,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,WAAW,QAAQ,iCAAiC;AAC7D,SACEC,iBAAiB,EACjBC,iBAAiB,QACZ,uCAAuC;AAC9C,SAASC,wBAAwB,QAAQ,8CAA8C;AACvF,SAASC,wBAAwB,QAAQ,8CAA8C;AAavF,OAAO,MAAMC,cAAc,GAAG;EAC5BC,KAAK,EAAE,aAAcN,WAAW,CAAC;IAC/BO,OAAO,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;IACjEC,MAAMA,CACJC,IAEC;MAID,MAAMC,YAAY,GAAGD,IAAI,CAACC,YAAY,EAAEC,GAAG,CAAEC,WAAW,IAAI;QAC1D,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE,OAAOA,WAAW;QACvD,OAAO;UACL,GAAGV,iBAAiB,CAACU,WAAW,CAAC;UACjCC,WAAW,EAAED,WAAW,CAACC,WAAW;UACpCC,UAAU,EAAEF,WAAW,CAACE,UAAU,GAC9BhB,WAAW,CAACc,WAAW,CAACE,UAAU,CAAC,GACnC,IAAI;UACRC,mBAAmB,EAAEH,WAAW,CAACG;SAClC;MACH,CAAC,CAA+B;MAChC,OAAO;QACLC,UAAU,EAAEP,IAAI,CAACO,UAAU;QAC3BN;OACD;IACH;GACD,CAAC;EACFE,WAAW,EAAE,aAAcX,iBAAiB,CAAC;IAC3CO,MAAMA,CAACC,IAAiC;MACtC,OAAO;QACLI,WAAW,EAAEJ,IAAI,CAACI,WAAW;QAC7BC,UAAU,EAAEL,IAAI,CAACK,UAAU,GAAGhB,WAAW,CAACW,IAAI,CAACK,UAAU,CAAC,GAAG,IAAI;QACjEC,mBAAmB,EAAEN,IAAI,CAACM;OAC3B;IACH;GACD,CAAC;EACFE,kBAAkB,EAAE,aAAcd,wBAAwB,CAAC;IACzDK,MAAMA,CACJC,IAAwC;MAExC,OAAO;QACLI,WAAW,EAAEJ,IAAI,CAACI,WAAW;QAC7BC,UAAU,EAAEL,IAAI,CAACK,UAAU,GAAGhB,WAAW,CAACW,IAAI,CAACK,UAAU,CAAC,GAAG,IAAI;QACjEC,mBAAmB,EAAEN,IAAI,CAACM;OAC3B;IACH;GACD,CAAC;EACFG,kBAAkB,EAAE,aAAcd,wBAAwB,CAAC;IACzDI,MAAMA,CACJC,IAAqC;MAErC,OAAO;QACLI,WAAW,EAAEJ,IAAI,CAACI,WAAW;QAC7BC,UAAU,EACR,OAAOL,IAAI,CAACK,UAAU,KAAK,WAAW,GAClCf,WAAW,CAACU,IAAI,CAACK,UAAU,CAAC,GAC5BK,SAAS;QACfJ,mBAAmB,EAAEN,IAAI,CAACM;OAC3B;IACH;GACD;CACiC"},"metadata":{},"sourceType":"module","externalDependencies":[]}